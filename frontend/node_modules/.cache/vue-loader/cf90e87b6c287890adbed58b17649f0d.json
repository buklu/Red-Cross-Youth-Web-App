{"remainingRequest":"C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\src\\views\\index.vue?vue&type=template&id=a83bd3b0&scoped=true&","dependencies":[{"path":"C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\src\\views\\index.vue","mtime":1607688216858},{"path":"C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1607505230642},{"path":"C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1607505237137},{"path":"C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1607505230642},{"path":"C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1607505237136}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}