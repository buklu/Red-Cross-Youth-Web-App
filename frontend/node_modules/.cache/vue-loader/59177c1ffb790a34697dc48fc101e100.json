{"remainingRequest":"D:\\School\\3rd_yr\\1st Sem\\CS3105-ApplicationDevelopment\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\School\\3rd_yr\\1st Sem\\CS3105-ApplicationDevelopment\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\School\\3rd_yr\\1st Sem\\CS3105-ApplicationDevelopment\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\School\\3rd_yr\\1st Sem\\CS3105-ApplicationDevelopment\\Red-Cross-Youth-Web-App\\frontend\\src\\views\\membershipForm.vue?vue&type=template&id=2ba25558&scoped=true&","dependencies":[{"path":"D:\\School\\3rd_yr\\1st Sem\\CS3105-ApplicationDevelopment\\Red-Cross-Youth-Web-App\\frontend\\src\\views\\membershipForm.vue","mtime":1608714158785},{"path":"D:\\School\\3rd_yr\\1st Sem\\CS3105-ApplicationDevelopment\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\School\\3rd_yr\\1st Sem\\CS3105-ApplicationDevelopment\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\School\\3rd_yr\\1st Sem\\CS3105-ApplicationDevelopment\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\School\\3rd_yr\\1st Sem\\CS3105-ApplicationDevelopment\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}