{"remainingRequest":"C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\src\\views\\Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\src\\views\\Home.vue","mtime":1608730549968},{"path":"C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1607505230642},{"path":"C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1607505237137},{"path":"C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1607505230642},{"path":"C:\\Users\\SHINJI\\Desktop\\AppDev_Class\\Finals\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1607505237136}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}