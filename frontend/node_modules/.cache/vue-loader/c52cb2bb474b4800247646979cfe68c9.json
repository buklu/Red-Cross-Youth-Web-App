{"remainingRequest":"/mnt/d/school/Red-Cross-Youth-Web-App/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/d/school/Red-Cross-Youth-Web-App/frontend/src/views/membershipForm.vue?vue&type=template&id=47809a1d&scoped=true&","dependencies":[{"path":"/mnt/d/school/Red-Cross-Youth-Web-App/frontend/src/views/membershipForm.vue","mtime":1609998708491},{"path":"/mnt/d/school/Red-Cross-Youth-Web-App/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1609998633966},{"path":"/mnt/d/school/Red-Cross-Youth-Web-App/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1609998702160},{"path":"/mnt/d/school/Red-Cross-Youth-Web-App/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1609998633966},{"path":"/mnt/d/school/Red-Cross-Youth-Web-App/frontend/node_modules/vue-loader/lib/index.js","mtime":1609998702145}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}