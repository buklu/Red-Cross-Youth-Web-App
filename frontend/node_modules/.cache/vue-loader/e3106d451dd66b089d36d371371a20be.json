{"remainingRequest":"C:\\Users\\Robin\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Robin\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Robin\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Robin\\Red-Cross-Youth-Web-App\\frontend\\src\\views\\docs.vue?vue&type=template&id=623a4856&scoped=true&","dependencies":[{"path":"C:\\Users\\Robin\\Red-Cross-Youth-Web-App\\frontend\\src\\views\\docs.vue","mtime":1608374381708},{"path":"C:\\Users\\Robin\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1608374366714},{"path":"C:\\Users\\Robin\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1608374380572},{"path":"C:\\Users\\Robin\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1608374366714},{"path":"C:\\Users\\Robin\\Red-Cross-Youth-Web-App\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1608374380570}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}